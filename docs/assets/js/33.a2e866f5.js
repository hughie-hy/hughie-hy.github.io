(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{442:function(_,v,t){"use strict";t.r(v);var s=t(2),e=Object(s.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h2",{attrs:{id:"一、-osi-七层模型是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一、-osi-七层模型是什么"}},[_._v("#")]),_._v(" 一、 OSI 七层模型是什么")]),_._v(" "),v("p",[_._v("OSI 模型全称为开放式通信系统互连参考模型，是国际标准化组织 ( ISO ) 提出的一个试图使各种计算机在世界范围内互连为网络的标准框架。 OSI 将计算机网络体系结构划分为七层，每一层实现各自的功能和协议，并完成与相邻层的接口通信。OSI 的服务定义详细说明了各层所提供的服务。某一层的服务就是该层及其下各层的一种能力，它通过接口提供给更高一层。各层所提供的服务与这些服务是怎么实现的无关。")]),_._v(" "),v("p",[v("a",{attrs:{href:"https://blog-chy.oss-cn-shenzhen.aliyuncs.com/static/OSI%E6%A8%A1%E5%9E%8B.png",target:"_blank",rel:"noopener noreferrer"}},[v("img",{attrs:{src:"https://blog-chy.oss-cn-shenzhen.aliyuncs.com/static/OSI%E6%A8%A1%E5%9E%8B.png",alt:"img"}}),v("OutboundLink")],1)]),_._v(" "),v("p",[_._v("①应用层")]),_._v(" "),v("p",[_._v("应用层位于 OSI 参考模型的第七层，其作用是通过应用程序间的交互来完成特定的网络应用。该层协议定义了应用进程之间的交互规则，通过不同的应用层协议为不同的网络应用提供服务。例如域名系统 DNS，支持万维网应用的 HTTP 协议，电子邮件系统采用的 SMTP 协议等。在应用层交互的数据单元我们称之为报文。")]),_._v(" "),v("p",[_._v("② 表示层")]),_._v(" "),v("p",[_._v("表示层的作用是使通信的应用程序能够解释交换数据的含义，其位于 OSI 参考模型的第六层，向上为应用层提供服务，向下接收来自会话层的服务。该层提供的服务主要包括数据压缩，数据加密以及数据描述。这使得应用程序不必担心在各台计算机中表示和存储的内部格式差异。")]),_._v(" "),v("p",[_._v("③ 会话层")]),_._v(" "),v("p",[_._v("会话层就是负责建立、管理和终止表示层实体之间的通信会话。该层提供了数据交换的定界和同步功能，包括了建立检查点和恢复方案的方法。")]),_._v(" "),v("p",[_._v("④ 传输层")]),_._v(" "),v("p",[_._v("传输层的主要任务是为两台主机进程之间的通信提供服务。应用程序利用该服务传送应用层报文。该服务并不针对某一特定的应用，多种应用可以使用同一个传输层服务。由于一台主机可同时运行多个线程，因此传输层有复用和分用的功能。所谓复用就是指多个应用层进程可同时使用下面传输层的服务，分用和复用相反，是传输层把收到的信息分别交付上面应用层中的相应进程。")]),_._v(" "),v("p",[_._v("⑤ 网络层")]),_._v(" "),v("p",[_._v("两台计算机之间传送数据时其通信链路往往不止一条，所传输的信息甚至可能经过很多通信子网。网络层的主要任务就是选择合适的网间路由和交换节点，确保数据按时成功传送。在发送数据时，网络层把传输层产生的报文或用户数据报封装成分组和包向下传输到数据链路层。在网络层使用的协议是无连接的网际协议（Internet Protocol）和许多路由协议，因此我们通常把该层简单地称为 IP 层。")]),_._v(" "),v("p",[_._v("⑥ 数据链路层")]),_._v(" "),v("p",[_._v("数据链路层通常也叫做链路层，在物理层和网络层之间。两台主机之间的数据传输，总是在一段一段的链路上传送的，这就需要使用专门的链路层协议。在两个相邻节点之间传送数据时，数据链路层将网络层交下来的 IP 数据报组装成帧，在两个相邻节点间的链路上传送帧。每一帧包括数据和必要的控制信息。通过控制信息我们可以知道一个帧的起止比特位置，此外，也能使接收端检测出所收到的帧有无差错，如果发现差错，数据链路层能够简单的丢弃掉这个帧，以避免继续占用网络资源。")]),_._v(" "),v("p",[_._v("⑦ 物理层")]),_._v(" "),v("p",[_._v("作为 OSI 参考模型中最低的一层，物理层的作用是实现计算机节点之间比特流的透明传送，尽可能屏蔽掉具体传输介质和物理设备的差异。使其上面的数据链路层不必考虑网络的具体传输介质是什么。该层的主要任务是确定与传输媒体的接口的一些特性（机械特性、电气特性、功能特性，过程特性）。")]),_._v(" "),v("h2",{attrs:{id:"二、get和post区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二、get和post区别"}},[_._v("#")]),_._v(" 二、GET和POST区别")]),_._v(" "),v("p",[_._v("GET提交的数据会放在 URL 之后，并且请求参数会被完整的保留在浏览器的记录里，由于参数直接暴露在 URL 中，可能会存在安全问题，因此往往用于获取资源信息。而 post 参数放在请求主体中，并且参数不会被保留，相比 GET方法，post 方法更安全，主要用于修改服务器上的资源。\nGET请求只支持 URL 编码，post 请求支持多种编码格式。\nGET只支持 ASCII 字符格式的参数，而 post 方法没有限制。\nGET提交的数据大小有限制（这里所说的限制是针对浏览器而言的），而 post 方法提交的数据没限制\nGET方式需要使用 Request.QueryString 来取得变量的值，而 post 方式通过 Request.Form 来获取。\nGET方法产生一个 TCP 数据包，post 方法产生两个（并不是所有的浏览器中都产生两个）。")]),_._v(" "),v("h2",{attrs:{id:"三、三次握手和四次挥手机制是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三、三次握手和四次挥手机制是什么"}},[_._v("#")]),_._v(" 三、三次握手和四次挥手机制是什么？")]),_._v(" "),v("p",[v("strong",[_._v("三次握手：")])]),_._v(" "),v("p",[v("a",{attrs:{href:"https://blog-chy.oss-cn-shenzhen.aliyuncs.com/static/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png",target:"_blank",rel:"noopener noreferrer"}},[v("img",{attrs:{src:"https://blog-chy.oss-cn-shenzhen.aliyuncs.com/static/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png",alt:"三次握手"}}),v("OutboundLink")],1)]),_._v(" "),v("p",[v("a",{attrs:{href:"https://blog-chy.oss-cn-shenzhen.aliyuncs.com/static/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png",target:"_blank",rel:"noopener noreferrer"}},[_._v("三次握手"),v("OutboundLink")],1)]),_._v(" "),v("p",[_._v("三次握手是 TCP 连接的建立过程。在握手之前，主动打开连接的客户端结束 CLOSE 阶段，被动打开的服务器也结束 CLOSE 阶段，并进入 LISTEN 阶段。随后进入三次握手阶段：")]),_._v(" "),v("p",[_._v("① 首先客户端向服务器发送一个 SYN 包，并等待服务器确认，其中：")]),_._v(" "),v("ul",[v("li",[_._v("标志位为 SYN，表示请求建立连接；")]),_._v(" "),v("li",[_._v("序号为 Seq = x（x 一般取随机数）；")]),_._v(" "),v("li",[_._v("随后客户端进入 SYN-SENT 阶段。")]),_._v(" "),v("li")]),_._v(" "),v("p",[_._v("② 服务器接收到客户端发来的 SYN 包后，对该包进行确认后结束 LISTEN 阶段，并返回一段 TCP 报文，其中：")]),_._v(" "),v("ul",[v("li",[_._v("标志位为 SYN 和 ACK，表示确认客户端的报文 Seq 序号有效，服务器能正常接收客户端发送的数据，并同意创建新连接；")]),_._v(" "),v("li",[_._v("序号为 Seq = y；")]),_._v(" "),v("li",[_._v("确认号为 Ack = x + 1，表示收到客户端的序号 Seq 并将其值加 1 作为自己确认号 Ack 的值，随后服务器端进入 SYN-RECV 阶段。")])]),_._v(" "),v("p",[_._v("③ 客户端接收到发送的 SYN + ACK 包后，明确了从客户端到服务器的数据传输是正常的，从而结束 SYN-SENT 阶段。并返回最后一段报文。其中：")]),_._v(" "),v("ul",[v("li",[_._v("标志位为 ACK，表示确认收到服务器端同意连接的信号；")]),_._v(" "),v("li",[_._v("序号为 Seq = x + 1，表示收到服务器端的确认号 Ack，并将其值作为自己的序号值；")]),_._v(" "),v("li",[_._v("确认号为 Ack= y + 1，表示收到服务器端序号 seq，并将其值加 1 作为自己的确认号 Ack 的值。")])]),_._v(" "),v("p",[_._v("随后客户端进入 ESTABLISHED。\n当服务器端收到来自客户端确认收到服务器数据的报文后，得知从服务器到客户端的数据传输是正常的，从而结束 SYN-RECV 阶段，进入 ESTABLISHED 阶段，从而完成三次握手。")]),_._v(" "),v("p",[v("strong",[_._v("四次挥手：")])]),_._v(" "),v("p",[v("a",{attrs:{href:"https://blog-chy.oss-cn-shenzhen.aliyuncs.com/static/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png",target:"_blank",rel:"noopener noreferrer"}},[v("img",{attrs:{src:"https://blog-chy.oss-cn-shenzhen.aliyuncs.com/static/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png",alt:"四次挥手"}}),v("OutboundLink")],1)]),_._v(" "),v("p",[v("a",{attrs:{href:"https://blog-chy.oss-cn-shenzhen.aliyuncs.com/static/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png",target:"_blank",rel:"noopener noreferrer"}},[_._v("四次挥手"),v("OutboundLink")],1)]),_._v(" "),v("p",[_._v("四次挥手即 TCP 连接的释放，这里假设客户端主动释放连接。在挥手之前主动释放连接的客户端结束 ESTABLISHED 阶段，随后开始四次挥手：")]),_._v(" "),v("p",[_._v("① 首先客户端向服务器发送一段 TCP 报文表明其想要释放 TCP 连接，其中：")]),_._v(" "),v("ul",[v("li",[_._v("标记位为 FIN，表示请求释放连接；")]),_._v(" "),v("li",[_._v("序号为 Seq = u；")]),_._v(" "),v("li",[_._v("随后客户端进入 FIN-WAIT-1 阶段，即半关闭阶段，并且停止向服务端发送通信数据。")])]),_._v(" "),v("p",[_._v("② 服务器接收到客户端请求断开连接的 FIN 报文后，结束 ESTABLISHED 阶段，进入 CLOSE-WAIT 阶段并返回一段 TCP 报文，其中：")]),_._v(" "),v("ul",[v("li",[_._v("标记位为 ACK，表示接收到客户端释放连接的请求；")]),_._v(" "),v("li",[_._v("序号为 Seq = v；")]),_._v(" "),v("li",[_._v("确认号为 Ack = u + 1，表示是在收到客户端报文的基础上，将其序号值加 1 作为本段报文确认号 Ack 的值；")]),_._v(" "),v("li",[_._v("随后服务器开始准备释放服务器端到客户端方向上的连接。")])]),_._v(" "),v("p",[_._v("客户端收到服务器发送过来的 TCP 报文后，确认服务器已经收到了客户端连接释放的请求，随后客户端结束 FIN-WAIT-1 阶段，进入 FIN-WAIT-2 阶段。")]),_._v(" "),v("p",[_._v("③ 服务器端在发出 ACK 确认报文后，服务器端会将遗留的待传数据传送给客户端，待传输完成后即经过 CLOSE-WAIT 阶段，便做好了释放服务器端到客户端的连接准备，再次向客户端发出一段 TCP 报文，其中：")]),_._v(" "),v("ul",[v("li",[_._v("标记位为 FIN 和 ACK，表示已经准备好释放连接了；")]),_._v(" "),v("li",[_._v("序号为 Seq = w；")]),_._v(" "),v("li",[_._v("确认号 Ack = u + 1，表示是在收到客户端报文的基础上，将其序号 Seq 的值加 1 作为本段报文确认号 Ack 的值。")])]),_._v(" "),v("p",[_._v("随后服务器端结束 CLOSE-WAIT 阶段，进入 LAST-ACK 阶段。并且停止向客户端发送数据。")]),_._v(" "),v("p",[_._v("④ 客户端收到从服务器发来的 TCP 报文，确认了服务器已经做好释放连接的准备，于是结束 FIN-WAIT-2 阶段，进入 TIME-WAIT 阶段，并向服务器发送一段报文，其中：")]),_._v(" "),v("p",[_._v("标记位为 ACK，表示接收到服务器准备好释放连接的信号；\n序号为 Seq= u + 1，表示是在已收到服务器报文的基础上，将其确认号 Ack 值作为本段序号的值；\n确认号为 Ack= w + 1，表示是在收到了服务器报文的基础上，将其序号 Seq 的值作为本段报文确认号的值。\n随后客户端开始在 TIME-WAIT 阶段等待 2 MSL。服务器端收到从客户端发出的 TCP 报文之后结束 LAST-ACK 阶段，进入 CLOSED 阶段。由此正式确认关闭服务器端到客户端方向上的连接。客户端等待完 2 MSL 之后，结束 TIME-WAIT 阶段，进入 CLOSED 阶段，由此完成「四次挥手」。")]),_._v(" "),v("h2",{attrs:{id:"四、网页解析全过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#四、网页解析全过程"}},[_._v("#")]),_._v(" 四、网页解析全过程")]),_._v(" "),v("p",[_._v("【用户输入网址到显示对应页面的全过程】")]),_._v(" "),v("p",[_._v("① DNS 解析：当用户输入一个网址并按下回车键的时候，浏览器获得一个域名，而在实际通信过程中，我们需要的是一个 IP 地址，因此我们需要先把域名转换成相应 IP 地址。【具体细节参看问题 16，17】")]),_._v(" "),v("p",[_._v("② TCP 连接：浏览器通过 DNS 获取到 Web 服务器真正的 IP 地址后，便向 Web 服务器发起 TCP 连接请求， 通过 TCP 三次握手建立好连接后，浏览器便可以将 HTTP 请求数据发送给服务器了。【三次握手放在传输层详细讲解】")]),_._v(" "),v("p",[_._v("③ 发送 HTTP 请求：浏览器向 Web 服务器发起一个 HTTP 请求，HTTP 协议是建立在 TCP 协议之上的应用层协议，其本质是在建立起的TCP连接中，按照HTTP协议标准发送一个索要网页的请求。在这一过程中，会涉及到负载均衡等操作。")]),_._v(" "),v("p",[_._v("拓展：什么是负载均衡？")]),_._v(" "),v("p",[_._v("负载均衡，英文名为 Load Balance，其含义是指将负载（工作任务）进行平衡、分摊到多个操作单元上进行运行，例如 FTP 服务器、Web 服务器、企业核心服务器和其他主要任务服务器等，从而协同完成工作任务。负载均衡建立在现有的网络之上，它提供了一种透明且廉价有效的方法扩展服务器和网络设备的带宽、增加吞吐量、加强网络处理能力并提高网络的灵活性和可用性。")]),_._v(" "),v("p",[_._v("负载均衡是分布式系统架构设计中必须考虑的因素之一，例如天猫、京东等大型用户网站中为了处理海量用户发起的请求，其往往采用分布式服务器，并通过引入反向代理等方式将用户请求均匀分发到每个服务器上，而这一过程所实现的就是负载均衡。")]),_._v(" "),v("p",[_._v("④ 处理请求并返回：服务器获取到客户端的 HTTP 请求后，会根据 HTTP 请求中的内容来决定如何获取相应的文件，并将文件发送给浏览器。")]),_._v(" "),v("p",[_._v("⑤ 浏览器渲染：浏览器根据响应开始显示页面，首先解析 HTML 文件构建 DOM 树，然后解析 CSS 文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。")]),_._v(" "),v("p",[_._v("⑥ 断开连接：客户端和服务器通过四次挥手终止 TCP 连接。【其中的细节放在传输层详细讲解】")]),_._v(" "),v("h2",{attrs:{id:"五、路由器和交换机的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#五、路由器和交换机的区别"}},[_._v("#")]),_._v(" 五、路由器和交换机的区别")]),_._v(" "),v("p",[_._v("交换机：交换机用于局域网，利用主机的物理地址（MAC 地址）确定数据转发的目的地址，它工作于"),v("strong",[_._v("数据链路层")]),_._v("。\n路由器：路由器通过数据包中的目的 IP 地址识别不同的网络从而确定数据转发的目的地址，网络号是唯一的。路由器根据路由选择协议和路由表信息从而确定数据的转发路径，直到到达目的网络，它工作于"),v("strong",[_._v("网络层")]),_._v("。")]),_._v(" "),v("h2",{attrs:{id:"六、为什么有了-mac-地址还需要-ip-地址"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#六、为什么有了-mac-地址还需要-ip-地址"}},[_._v("#")]),_._v(" 六、为什么有了 MAC 地址还需要 IP 地址")]),_._v(" "),v("p",[_._v("如果我们只使用 MAC 地址进行寻址的话，我们需要路由器记住每个 MAC 地址属于哪一个子网，不然每一次路由器收到数据包时都要满世界寻找目的 MAC 地址。而我们知道 MAC 地址的长度为 48 位，也就是说最多总共有 2 的 48 次方个 MAC 地址，这就意味着每个路由器需要 256 T 的内存，这显然是不现实的。\n和 MAC 地址不同，IP 地址是和地域相关的，在一个子网中的设备，我们给其分配的 IP 地址前缀都是一样的，这样路由器就能根据 IP 地址的前缀知道这个设备属于哪个子网，剩下的寻址就交给子网内部实现，从而大大减少了路由器所需要的内存。")]),_._v(" "),v("h2",{attrs:{id:"七、对称加密和非对称的区别-非对称加密有哪些"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#七、对称加密和非对称的区别-非对称加密有哪些"}},[_._v("#")]),_._v(" 七、对称加密和非对称的区别，非对称加密有哪些？")]),_._v(" "),v("ol",[v("li",[_._v("加密和解密的过程不同：对称加密和解密过程使用同一个密钥；非对称加密中加密和解密采用公钥和私钥两个密钥，一般使用公钥进行加密，使用私钥进行解密。")]),_._v(" "),v("li",[_._v("加密和解密的速度不同：对称加密和解密速度较快，当数据量比较大时适合使用；非对称加密和解密时间较长，速度相对较慢，适合少量数据传输的场景。")]),_._v(" "),v("li",[_._v("传输的安全性不同：采用对称加密方式进行通信时，收发双方在数据传送前需要协定好密钥，而这个密钥还有可能被第三方窃听到的，一旦密钥泄漏，之后的通信就完全暴漏给攻击者了；非对称加密采用公钥加密和私钥解密的方式，其中私钥是基于不同的算法生成的随机数，公钥可以通过私钥通过一定的算法推导得出，并且私钥到公钥的推导过程是不可逆的，也就是说公钥无法反推导出私钥，即使攻击者窃听到传输的公钥，也无法正确解出数据，所以安全性较高。")]),_._v(" "),v("li",[_._v("常见的非对称加密算法主要有：RSA、Elgamal、背包算法、Rabin、D-H 算法等等。")])]),_._v(" "),v("h2",{attrs:{id:"八、ddos-有哪些-如何防范"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#八、ddos-有哪些-如何防范"}},[_._v("#")]),_._v(" 八、DDoS 有哪些，如何防范？")]),_._v(" "),v("p",[_._v("DDoS 为分布式拒绝服务攻击，是指处于不同位置的多个攻击者同时向一个或数个目标发动攻击，或者一个攻击者控制了不同位置上的多台机器并利用这些机器对受害者同时实施攻击。和单一的 DoS 攻击相比，DDoS 是借助数百台或者数千台已被入侵并添加了攻击进程的主机一起发起网络攻击。\nDDoS 攻击主要有两种形式：流量攻击和资源耗尽攻击。前者主要针对网络带宽，攻击者和已受害主机同时发起大量攻击导致网络带宽被阻塞，从而淹没合法的网络数据包；后者主要针对服务器进行攻击，大量的攻击包会使得服务器资源耗尽或者 CPU 被内核应用程序占满从而无法提供网络服务。\n常见的 DDos 攻击主要有：TCP 洪水攻击（SYN Flood）、放射性攻击（DrDos）、CC 攻击（HTTP Flood）等。\n针对 DDoS 中的流量攻击，最直接的方法是增加带宽，理论上只要带宽大于攻击流量就可以了，但是这种方法成本非常高。在有充足网络带宽的前提下，我们应尽量提升路由器、网卡、交换机等硬件设施的配置。\n针对资源耗尽攻击，我们可以升级主机服务器硬件，在网络带宽得到保证的前提下，使得服务器能有效对抗海量的 SYN 攻击包。我们也可以安装专业的抗 DDoS 防火墙，从而对抗 SYN Flood等流量型攻击。此外，负载均衡，CDN 等技术都能够有效对抗 DDoS 攻击。")])])}),[],!1,null,null,null);v.default=e.exports}}]);