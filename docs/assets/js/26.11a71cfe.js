(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{431:function(e,t,a){"use strict";a.r(t);var n=a(2),s=Object(n.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"interruptedexception-should-not-be-ignored"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#interruptedexception-should-not-be-ignored"}},[e._v("#")]),e._v(' "InterruptedException" should not be ignored')]),e._v(" "),t("ul",[t("li",[e._v("Bug")]),e._v(" "),t("li",[e._v("Major")])]),e._v(" "),t("p",[t("code",[e._v("InterruptedExceptions")]),e._v(' should never be ignored in the code, and simply logging the exception counts in this case as "ignoring". The throwing of the '),t("code",[e._v("InterruptedException")]),e._v(" clears the interrupted state of the Thread, so if the exception is not handled properly the information that the thread was interrupted will be lost. Instead, "),t("code",[e._v("InterruptedExceptions")]),e._v(" should either be rethrown - immediately or after cleaning up the method’s state - or the thread should be re-interrupted by calling "),t("code",[e._v("Thread.interrupt()")]),e._v(" even if this is supposed to be a single-threaded application. Any other course of action risks delaying thread shutdown and loses the information that the thread was interrupted - probably without finishing its task.")]),e._v(" "),t("p",[e._v("Similarly, the "),t("code",[e._v("ThreadDeath")]),e._v(" exception should also be propagated. According to its JavaDoc:")]),e._v(" "),t("blockquote",[t("p",[e._v("If "),t("code",[e._v("ThreadDeath")]),e._v(" is caught by a method, it is important that it be rethrown so that the thread actually dies.")])]),e._v(" "),t("h3",{attrs:{id:"noncompliant-code-example"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#noncompliant-code-example"}},[e._v("#")]),e._v(" Noncompliant Code Example")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public void run () {\n  try {\n    while (true) {\n      // do stuff\n    }\n  }catch (InterruptedException e) { // Noncompliant; logging is not enough\n    LOGGER.log(Level.WARN, "Interrupted!", e);\n  }\n}\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br")])]),t("h3",{attrs:{id:"compliant-solution"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#compliant-solution"}},[e._v("#")]),e._v(" Compliant Solution")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public void run () {\n  try {\n    while (true) {\n      // do stuff\n    }\n  }catch (InterruptedException e) {\n    LOGGER.log(Level.WARN, "Interrupted!", e);\n    // Restore interrupted state...\n    Thread.currentThread().interrupt();\n  }\n}\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br")])]),t("h2",{attrs:{id:"bigdecimal-double-should-not-be-used"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bigdecimal-double-should-not-be-used"}},[e._v("#")]),e._v(' "BigDecimal(double)" should not be used')]),e._v(" "),t("ul",[t("li",[e._v("Bug")]),e._v(" "),t("li",[e._v("Major")])]),e._v(" "),t("p",[e._v("Because of floating point imprecision, you’re unlikely to get the value you expect from the "),t("code",[e._v("BigDecimal(double)")]),e._v(" constructor.")]),e._v(" "),t("p",[e._v("From "),t("a",{attrs:{href:"http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#BigDecimal(double)",target:"_blank",rel:"noopener noreferrer"}},[e._v("the JavaDocs"),t("OutboundLink")],1),e._v(":")]),e._v(" "),t("blockquote",[t("p",[e._v("The results of this constructor can be somewhat unpredictable. One might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to 0.1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly as a double (or, for that matter, as a binary fraction of any finite length). Thus, the value that is being passed in to the constructor is not exactly equal to 0.1, appearances notwithstanding.")])]),e._v(" "),t("p",[e._v("Instead, you should use "),t("code",[e._v("BigDecimal.valueOf")]),e._v(", which uses a string under the covers to eliminate floating point rounding errors, or the constructor that takes a "),t("code",[e._v("String")]),e._v(" argument.")]),e._v(" "),t("h3",{attrs:{id:"noncompliant-code-example-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#noncompliant-code-example-2"}},[e._v("#")]),e._v(" Noncompliant Code Example")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("double d = 1.1;\n\nBigDecimal bd1 = new BigDecimal(d); // Noncompliant; see comment above\nBigDecimal bd2 = new BigDecimal(1.1); // Noncompliant; same result\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("h3",{attrs:{id:"compliant-solution-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#compliant-solution-2"}},[e._v("#")]),e._v(" Compliant Solution")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('double d = 1.1;\n\nBigDecimal bd1 = BigDecimal.valueOf(d);\nBigDecimal bd2 = new BigDecimal("1.1"); // using String constructor will result in precise value\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("h2",{attrs:{id:"random-objects-should-be-reused"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#random-objects-should-be-reused"}},[e._v("#")]),e._v(' "Random" objects should be reused')]),e._v(" "),t("ul",[t("li",[e._v("Bug")]),e._v(" "),t("li",[e._v("Critical")])]),e._v(" "),t("p",[e._v("Creating a new "),t("code",[e._v("Random")]),e._v(" object each time a random value is needed is inefficient and may produce numbers which are not random depending on the JDK. For better efficiency and randomness, create a single "),t("code",[e._v("Random")]),e._v(", then store, and reuse it.")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("Random()")]),e._v(" constructor tries to set the seed with a distinct value every time. However there is no guarantee that the seed will be random or even uniformly distributed. Some JDK will use the current time as seed, which makes the generated numbers not random at all.")]),e._v(" "),t("p",[e._v("This rule finds cases where a new "),t("code",[e._v("Random")]),e._v(" is created each time a method is invoked.")]),e._v(" "),t("h3",{attrs:{id:"noncompliant-code-example-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#noncompliant-code-example-3"}},[e._v("#")]),e._v(" Noncompliant Code Example")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public void doSomethingCommon() {\n  Random rand = new Random();  // Noncompliant; new instance created with each invocation\n  int rValue = rand.nextInt();\n  //...\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("h3",{attrs:{id:"compliant-solution-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#compliant-solution-3"}},[e._v("#")]),e._v(" Compliant Solution")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("private Random rand = SecureRandom.getInstanceStrong();  // SecureRandom is preferred to Random\n\npublic void doSomethingCommon() {\n  int rValue = this.rand.nextInt();\n  //...\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("h3",{attrs:{id:"exceptions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#exceptions"}},[e._v("#")]),e._v(" Exceptions")]),e._v(" "),t("p",[e._v("A class which uses a "),t("code",[e._v("Random")]),e._v(" in its constructor or in a static "),t("code",[e._v("main")]),e._v(" function and nowhere else will be ignored by this rule.")]),e._v(" "),t("h2",{attrs:{id:"double-brace-initialization-should-not-be-used"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#double-brace-initialization-should-not-be-used"}},[e._v("#")]),e._v(" Double Brace Initialization should not be used")]),e._v(" "),t("ul",[t("li",[e._v("Bug")]),e._v(" "),t("li",[e._v("Minor")])]),e._v(" "),t("p",[e._v("Because Double Brace Initialization (DBI) creates an anonymous class with a reference to the instance of the owning object, its use can lead to memory leaks if the anonymous inner class is returned and held by other objects. Even when there’s no leak, DBI is so obscure that it’s bound to confuse most maintainers.")]),e._v(" "),t("p",[e._v("For collections, use "),t("code",[e._v("Arrays.asList")]),e._v(" instead, or explicitly add each item directly to the collection.")]),e._v(" "),t("h3",{attrs:{id:"noncompliant-code-example-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#noncompliant-code-example-4"}},[e._v("#")]),e._v(" Noncompliant Code Example")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('Map source = new HashMap(){{ // Noncompliant\n    put("firstName", "John");\n    put("lastName", "Smith");\n}};\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("h3",{attrs:{id:"compliant-solution-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#compliant-solution-4"}},[e._v("#")]),e._v(" Compliant Solution")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('Map source = new HashMap();\n// ...\nsource.put("firstName", "John");\nsource.put("lastName", "Smith");\n// ...\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])])])}),[],!1,null,null,null);t.default=s.exports}}]);