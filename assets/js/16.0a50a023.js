(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{426:function(s,t,a){"use strict";a.r(t);var n=a(2),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("有一个单向链表，链表中有可能出现“环”，就像下图这样。那么，如何用程序来判断该链表是否为有环链表呢？")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://blog-chy.oss-cn-shenzhen.aliyuncs.com/static/image-20220322002701255.png",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"https://blog-chy.oss-cn-shenzhen.aliyuncs.com/static/image-20220322002701255.png",alt:"img"}}),t("OutboundLink")],1)]),s._v(" "),t("h3",{attrs:{id:"方法一"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法一"}},[s._v("#")]),s._v(" 方法一")]),s._v(" "),t("p",[s._v("首先从头节点开始，依次遍历单链表中的每一个节点。每遍历一个新节点，就从头检查新节点之前的所有节点，用新节点和此节点之前所有节点依次做比较。如果发现新节点和之前的某个节点相同，则说明该节点被遍历过两次，链表有环；如果之前的所有节点中不存在与新节点相同的节点，就继续遍历下一个新节点，继续重复刚才的操作。")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://blog-chy.oss-cn-shenzhen.aliyuncs.com/static/image-20220322003040461.png",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"https://blog-chy.oss-cn-shenzhen.aliyuncs.com/static/image-20220322003040461.png",alt:"img"}}),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("假设链表的节点数量为n，则该解法的时间复杂度为"),t("strong",[s._v("O(n^2)")]),s._v("。由于并没有创建额外的存储空间，所以空间复杂度为"),t("strong",[s._v("O(1)")]),s._v("。")]),s._v(" "),t("h3",{attrs:{id:"方法二"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法二"}},[s._v("#")]),s._v(" 方法二")]),s._v(" "),t("p",[s._v("首先创建一个以节点ID为Key的HashSet集合，用来存储曾经遍历过的节点。然后同样从头节点开始，依次遍历单链表中的每一个节点。每遍历一个新节点，都用新节点和HashSet集合中存储的节点进行比较，如果发现HashSet中存在与之相同的节点ID，则说明链表有环，如果HashSet中不存在与新节点相同的节点ID，就把这个新节点ID存入HashSet中，之后进入下一节点，继续重复刚才的操作")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://blog-chy.oss-cn-shenzhen.aliyuncs.com/static/image-20220322003538749.png",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"https://blog-chy.oss-cn-shenzhen.aliyuncs.com/static/image-20220322003538749.png",alt:"img"}}),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("再次遍历到2节点时，发现节点已存在。由此可知，链表有环。")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://blog-chy.oss-cn-shenzhen.aliyuncs.com/static/image-20220322003602774.png",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"https://blog-chy.oss-cn-shenzhen.aliyuncs.com/static/image-20220322003602774.png",alt:"img"}}),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("假设链表的节点数量为n，则该解法的时间复杂度是*"),t("em",[s._v("O(n)**。由于使 用了额外的存储空间，所以算法的空间复杂度同样是*"),t("em",[s._v("O(n)")])])]),s._v(" "),t("h3",{attrs:{id:"方法三"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法三"}},[s._v("#")]),s._v(" 方法三")]),s._v(" "),t("p",[t("strong",[s._v("快慢指针")])]),s._v(" "),t("p",[s._v("首先创建两个指针p1和p2（在Java里就是两个对象引用），让它们同时指向这个链表的头节点。然后开始一个大循环，在循环体中，让指针p1每次向后移动1个节点，让指针p2每次向后移动2个节点，然后比较 两个指针指向的节点是否相同。如果相同，则可以判断出链表有环，如果不同，则继续下一次循环。")]),s._v(" "),t("p",[s._v("在一个环形跑道上，两个运动员从同一地点起跑，一个运动员速度快，另一个运动员速度慢。当两人跑了一段时间后，速度快的运动员必然会再次追上并超过速度慢的运动员，原因很简单，因为跑道是环形的。")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("hasCycle")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" head"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" fast "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" head"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" slow "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" head"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("slow "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" fast"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        slow "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" slow"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        fast "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" fast"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("fast "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" slow"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("h1",{attrs:{id:"拓展问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#拓展问题"}},[s._v("#")]),s._v(" 拓展问题")]),s._v(" "),t("h2",{attrs:{id:"_1、如果链表有环-如何求出环的长度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、如果链表有环-如何求出环的长度"}},[s._v("#")]),s._v(" 1、如果链表有环，如何求出环的长度？")]),s._v(" "),t("p",[s._v("当两个指针首次相遇，证明链表有环的时候，让两个指针从相遇点继续循环前进，并统计前进的循环次数，直到两个指针第2次相遇。此时，统计出来的前进次数就是环长。因为指针p1每次走1步，指针p2每次走2步，两者的速度差是1步。当两个指针再次相遇时，p2比p1多走了整整1圈。因此，"),t("strong",[s._v("环长 = 每一次速度差 × 前进次数 = 前进次数（速度差为1）")]),s._v("。")]),s._v(" "),t("h2",{attrs:{id:"_2、如果链表有环-如何求出入环节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、如果链表有环-如何求出入环节点"}},[s._v("#")]),s._v(" 2、如果链表有环，如何求出入环节点？")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://blog-chy.oss-cn-shenzhen.aliyuncs.com/static/image-20220322214529541.png",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"https://blog-chy.oss-cn-shenzhen.aliyuncs.com/static/image-20220322214529541.png",alt:"img"}}),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("上图是对有环链表所做的一个抽象示意图。假设从链表头节点到入环点的距离是D，从入环点到两个指针首次相遇点的距离是S1，从首次相遇点回到入环点的距离是S2。那么，当两个指针首次相遇时，各自所走的距离是多少呢？")]),s._v(" "),t("ul",[t("li",[s._v("指针p1一次只走1步，所走的距离是"),t("code",[s._v("D+S1")]),s._v("。")]),s._v(" "),t("li",[s._v("指针p2一次走2步，多走了n(n>=1)整圈，所走的距离是"),t("code",[s._v("D+S1+n(S1+S2)")]),s._v("。")])]),s._v(" "),t("p",[s._v("由于p2的速度是p1的2倍，所以所走距离也是p1的2倍，因此："),t("code",[s._v("2(D+S1) = D+S1+n(S1+S2)")])]),s._v(" "),t("p",[s._v("整理得出："),t("code",[s._v("D = (n-1)(S1+S2)+S2")])]),s._v(" "),t("p",[s._v("也就是说，从链表头结点到入环点的距离，等于从首次相遇点绕环n-1圈再回到入环点的距离。 这样一来，只要把其中一个指针放回到头节点位置，另一个指针保持在首次相遇点，两个指针都是每次向前走1步。那么，它们最终相遇的节点，就是入环节点。")])])}),[],!1,null,null,null);t.default=e.exports}}]);